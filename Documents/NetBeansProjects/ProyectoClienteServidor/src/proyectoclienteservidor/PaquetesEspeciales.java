/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoclienteservidor;


import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class PaquetesEspeciales extends javax.swing.JFrame implements Catalogos{
    
     private ArrayList<DatosPaquetesEspeciales> paquetes = new ArrayList<DatosPaquetesEspeciales>();
     private ArrayList<String> serviciosAgregados =  new ArrayList<String>();
     public DefaultTableModel model = new DefaultTableModel();
        

    /**
     * Creates new form PaqueteServicios
     */
    public PaquetesEspeciales() {
        initComponents();
        setTitle("Gestión de Paquetes de Servicios");
        setLocationRelativeTo(null);
        setResizable(false);
        model.addColumn("SERVICIO");
        model.addColumn("COSTO");
        model.addColumn("PROVEEDOR");
        cargarPaquetes();
        cargarServicios();
    }

    public ArrayList<DatosPaquetesEspeciales> getPaquetes() {
        return paquetes;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setText("PAQUETE SERVICIOS");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel2.setText("Identificación:");

        jCheckBox1.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jCheckBox1.setText("Activo");
        jCheckBox1.setFocusable(false);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel8.setText("Estado:");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel5.setText("Descipcion:");

        jToolBar1.setRollover(true);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/add.png"))); // NOI18N
        jButton2.setToolTipText("Agrega un paquete de servicio");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/edit.png"))); // NOI18N
        jButton5.setToolTipText("Modifica los datos de un paquete de servicio");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/asking.png"))); // NOI18N
        jButton6.setToolTipText("Consulta un paquete de servicio");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/activar.png"))); // NOI18N
        jButton9.setToolTipText("Inactiva un paquete de servicio");
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setMaximumSize(new java.awt.Dimension(36, 36));
        jButton9.setMinimumSize(new java.awt.Dimension(33, 33));
        jButton9.setPreferredSize(new java.awt.Dimension(31, 31));
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton9);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salir.png"))); // NOI18N
        jButton11.setToolTipText("Regresa al Menú Principal");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setMaximumSize(new java.awt.Dimension(36, 36));
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel6.setText("Servicio:");

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SERVICIO", "COSTO", "PROVEEDOR"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(162, 162, 162)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox1))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel1)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addGap(8, 8, 8)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(null, "¡Se debe ingresar una identificación!",
                    "Error al agregar", JOptionPane.ERROR_MESSAGE);
            return;
        }
        agregar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(null, "¡Se debe ingresar una identificación para editar!",
                    "Error al editar", JOptionPane.ERROR_MESSAGE);
            return;
        }
        editar();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(null, "¡Se debe ingresar una identificación para consultar!",
                    "Error al consultar", JOptionPane.ERROR_MESSAGE);
            return;
        }
        consultar();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        inactivar();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //SE GUARDA EN EL ARCHIVO CADA VEZ QUE SE VUELVE AL MENÚ PRINCIPAL
        guardarArchivo();
        this.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String servicioDescripcion = (String) jComboBox1.getSelectedItem();
        DatosServicios servicio = obtenerServicio(servicioDescripcion);
        boolean valido = true;
        
        //PODRIA CAMBIARLO A QUE GUARDE EL OBJETO, NO LA DESCRIPCION NADA MÁS 
        for(String descripcion : serviciosAgregados){
            if(descripcion.equals(servicioDescripcion)){
                valido = false;
                JOptionPane.showMessageDialog(null, "¡El servicio ya ha sido agregado!",
                        "Servicio ya existe", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        serviciosAgregados.add(servicioDescripcion);
        model.addRow(new Object[]{servicioDescripcion, servicio.getCosto(), servicio.getProveedor().getNombre()});
        jTable1.setModel(model);
       
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "¡Debe seleccionar una fila de la tabla antes de eliminar!",
                        "Error al eliminar", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(serviciosAgregados.size()>0){
            serviciosAgregados.remove(jTable1.getSelectedRow());
        }   
        model.removeRow(jTable1.getSelectedRow());
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    @Override
    public void agregar() {
        int id = Integer.parseInt(jTextField1.getText());
        String descripcion =  jTextField4.getText();
        boolean existe = buscar(id, descripcion);
        
        if (existe){
            JOptionPane.showMessageDialog(null, "¡Datos ya existen!",
                        "Datos ya existen", JOptionPane.ERROR_MESSAGE);
            limpiar();
            return;
        }
            
        DatosPaquetesEspeciales paquete = new DatosPaquetesEspeciales();
        paquete.setIdentificacion(Integer.parseInt(jTextField1.getText()));
        paquete.setDescripcion(jTextField4.getText());

        //agregar servicios
        ArrayList<DatosServicios> listadoServicios = new ArrayList<DatosServicios>();

        for(String descripcionServicio : serviciosAgregados){
            DatosServicios servicio = obtenerServicio(descripcionServicio);
            listadoServicios.add(servicio);    
        }

        paquete.setServicios(listadoServicios);

        if (jCheckBox1.isSelected()) {
            paquete.setEstado((byte) 1);
        } else {
            paquete.setEstado((byte) 0);
        }
            
            
        paquetes.add(paquete);
        limpiar();
        JOptionPane.showMessageDialog(null, "¡Datos agregados correctamente!",
                    "Datos agregados", JOptionPane.INFORMATION_MESSAGE);

    }

    @Override
    public void editar() {
        int identificacion = Integer.parseInt(jTextField1.getText());
        boolean noExiste = true;
        
        for(DatosPaquetesEspeciales paquete : paquetes){
            if(paquete.getIdentificacion() == identificacion){
                noExiste = false;
                
                paquete.setIdentificacion(Integer.parseInt(jTextField1.getText()));
                paquete.setDescripcion(jTextField4.getText());

                //agregar servicios
                ArrayList<DatosServicios> listadoServicios = new ArrayList<DatosServicios>();

                for(String descripcionServicio : serviciosAgregados){
                    DatosServicios servicio = obtenerServicio(descripcionServicio);
                    listadoServicios.add(servicio);    
                }

                paquete.setServicios(listadoServicios);

                if (jCheckBox1.isSelected()) {
                    paquete.setEstado((byte) 1);
                } else {
                    paquete.setEstado((byte) 0);
                }
            }
        }

        if(noExiste){
            limpiar();
            JOptionPane.showMessageDialog(null, "¡No existe un proveedor con la identificacion ingresada!",
                "Error al editar", JOptionPane.ERROR_MESSAGE);
        }else{
            limpiar();
            JOptionPane.showMessageDialog(null, "¡Datos editados correctamente!",
                "Datos Editados", JOptionPane.INFORMATION_MESSAGE);                
        }
    }
    
    @Override
    public void inactivar() {
        
        int identificacion = Integer.parseInt(jTextField1.getText());
        boolean noExiste = true;

        for(DatosPaquetesEspeciales paquete : paquetes){
            if(paquete.getIdentificacion() == identificacion){
                noExiste = false;
                paquete.setEstado((byte)0);
                limpiar();
                JOptionPane.showMessageDialog(null, "¡Proveedor inactivado correctamente!",
                "Inactivar proveedor", JOptionPane.ERROR_MESSAGE); 
                return;

            }
        }
        if(noExiste){
            limpiar();
            JOptionPane.showMessageDialog(null, "¡No existe un proveedor con la identificacion ingresada!",
                "Error al inactivar", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void consultar() {
        int identificacion = Integer.parseInt(jTextField1.getText());
        boolean noExiste = true;
        limpiar();
        for(DatosPaquetesEspeciales paquete : paquetes){
            if(paquete.getIdentificacion() == identificacion){
                noExiste = false;
                jTextField1.setText(Integer.toString(identificacion));
                jTextField4.setText(paquete.getDescripcion());
                
                ArrayList<DatosServicios> servicios = paquete.getServicios();
                for(DatosServicios servicio : servicios){
                    if (servicio != null){
                        model.addRow(new Object[]{servicio.getDescripcion(), servicio.getCosto(), servicio.getProveedor().getNombre()});
                        serviciosAgregados.add(servicio.getDescripcion());
                    }  
                }
                
                jTable1.setModel(model);
                
                if (paquete.getEstado() == 0) {
                        jCheckBox1.setSelected(false);
                }else {
                        jCheckBox1.setSelected(true);
                }
            }
        }
        
        if(noExiste){
            limpiar();
            JOptionPane.showMessageDialog(null, "¡No existe un proveedor con la identificacion ingresada!",
                "Error al consultar", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    @Override
    public boolean buscar(int id, String descripcion){
        for(DatosPaquetesEspeciales paquete : paquetes){
             if(paquete.getIdentificacion() == id || paquete.getDescripcion() == descripcion)
                 return true;
        }       
        return false;
    }
    
    @Override
    public void guardarArchivo(){
    
        try {
            DataOutputStream salida = new DataOutputStream(new FileOutputStream("paquetes.dat", false));
            for(DatosPaquetesEspeciales paquete : paquetes){
                ArrayList<DatosServicios> listaServicios = paquete.getServicios();
                String servicios = "";
                
                for(DatosServicios servicio : listaServicios){
                    if(servicio != null){
                        servicios += servicio.getDescripcion() + "," ;
                    }  
                }
                salida.writeInt(paquete.getIdentificacion());
                salida.writeUTF(paquete.getDescripcion());
                salida.writeByte(paquete.getEstado());
                salida.writeUTF(servicios);

            }
            salida.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "¡Ocurrió un error al guardar!",
                    "Error al guardar", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "¡Ocurrió un error al guardar!",
                    "Error al guardar", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void cargarPaquetes(){
        try {
            DataInputStream entrada = new DataInputStream(new FileInputStream(
                    "paquetes.dat"));
            try {
                while (true) {
                    DatosPaquetesEspeciales dpe = new DatosPaquetesEspeciales();
                    dpe.setIdentificacion(entrada.readInt());
                    dpe.setDescripcion(entrada.readUTF());
                    dpe.setEstado(entrada.readByte());
                    String servicios = entrada.readUTF();
                    
                    ArrayList<DatosServicios> listaServicios = new ArrayList<DatosServicios>();
                    
                    String[] listaServiciosInput = servicios.split(",");
                    
                    for(String ser : listaServiciosInput){
                        listaServicios.add(obtenerServicio(ser));
                    }
                    
                    dpe.setServicios(listaServicios);
                    
                    paquetes.add(dpe);
                }
            } catch (EOFException eeof) {
                entrada.close();
            }
        } catch (IOException eioe) {
            JOptionPane.showMessageDialog(null, "¡Error en el dispositivo de almacenamiento!",
                    "Error en el dispositivo", JOptionPane.ERROR_MESSAGE);
        }   
    }
    
    public void cargarServicios(){
        Servicios listaServicios = new Servicios();
        ArrayList<DatosServicios> servicios = listaServicios.getServicios();
        
        for(DatosServicios servicio : servicios){
            if(servicio.getEstado() == 1)
                jComboBox1.addItem(servicio.getDescripcion());
        }
    
    }
    
    public DatosServicios obtenerServicio(String descripcion){
        Servicios listaServicios = new Servicios();
        ArrayList<DatosServicios> servicios = listaServicios.getServicios();
        
        for(DatosServicios servicio : servicios){
            if(servicio.getDescripcion().equals(descripcion)){
                return servicio;
            }
        }
        return null;
    }
    
    public void limpiar(){
        jTextField1.setText("");
        jTextField4.setText("");
        jCheckBox1.setSelected(false);
        model.getDataVector().removeAllElements();
        jTable1.updateUI();
        serviciosAgregados =  new ArrayList<String>();
        jTextField1.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
