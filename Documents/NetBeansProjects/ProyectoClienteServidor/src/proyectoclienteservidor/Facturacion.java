/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectoclienteservidor;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Facturacion extends javax.swing.JFrame {

    /**
     * Creates new form frmFacturacion
     */
    public Facturacion() {
        initComponents();
        setTitle("Gestión de Facturas");
        modelFacturas.addColumn("Número");
        modelFacturas.addColumn("Fecha");
        modelFacturas.addColumn("Hora");
        modelFacturas.addColumn("Servicio");
        modelFacturas.addColumn("Cliente");
        modelFacturas.addColumn("Cantidad");
        modelFacturas.addColumn("Costo");
        modelFacturas.addColumn("Total");
        llenarComboBox1();
        llenarComboBox2();
        llenarTabla();
    }

    private int encontrado;
    public DefaultTableModel modelFacturas = new DefaultTableModel();
    Servicios s = new Servicios();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNumeroFactura = new javax.swing.JTextField();
        txtFechaFactura = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFactura = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        btnGuardar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtHoraFactura = new javax.swing.JTextField();
        cbServicio = new javax.swing.JComboBox<>();
        cbNombre = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Número de factura:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Fecha:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Servicio");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Nombre");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Cantidad");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Costo");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Total");

        txtNumeroFactura.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtNumeroFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroFacturaActionPerformed(evt);
            }
        });

        txtFechaFactura.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtFechaFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaFacturaActionPerformed(evt);
            }
        });

        txtCantidad.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadActionPerformed(evt);
            }
        });

        txtPrecio.setEditable(false);
        txtPrecio.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });

        lblTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTotal.setText("0.00");

        tablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número", "Fecha", "Hora", "Servicio", "Cliente", "Cantidad", "Costo", "Total"
            }
        ));
        tablaFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaFacturaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaFactura);

        jToolBar1.setRollover(true);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/add.png"))); // NOI18N
        btnGuardar.setToolTipText("Agrega una factura");
        btnGuardar.setFocusable(false);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnGuardar);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/edit.png"))); // NOI18N
        btnEditar.setToolTipText("Modifica los datos de una factura");
        btnEditar.setFocusable(false);
        btnEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditar);

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/icons8_Trash_24px.png"))); // NOI18N
        btnCancelar.setToolTipText("Elimina una factura");
        btnCancelar.setFocusable(false);
        btnCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(btnCancelar);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salir.png"))); // NOI18N
        jButton11.setToolTipText("Regresa al Menú Principal");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setMaximumSize(new java.awt.Dimension(36, 36));
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel8.setText("FACTURACIÓN");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Hora:");

        txtHoraFactura.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtHoraFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoraFacturaActionPerformed(evt);
            }
        });

        cbServicio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbServicioItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(391, 391, 391)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNumeroFactura)
                                            .addComponent(txtFechaFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel9))
                                        .addGap(18, 18, 18)
                                        .addComponent(txtHoraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(cbServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 199, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumeroFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFechaFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtHoraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal)
                    .addComponent(cbServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumeroFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroFacturaActionPerformed

    private void txtFechaFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaFacturaActionPerformed

    private void txtCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadActionPerformed

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void tablaFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaFacturaMouseClicked
        if (tablaFactura.getSelectedRow() >= 0) {
            int fila = tablaFactura.getSelectedRow();
            String[] datosLeidos
                    = {
                        String.valueOf(tablaFactura.getValueAt(fila, 0)),
                        String.valueOf(tablaFactura.getValueAt(fila, 1)),
                        String.valueOf(tablaFactura.getValueAt(fila, 2)),
                        String.valueOf(tablaFactura.getValueAt(fila, 3)),
                        String.valueOf(tablaFactura.getValueAt(fila, 4)),
                        String.valueOf(tablaFactura.getValueAt(fila, 5)),
                        String.valueOf(tablaFactura.getValueAt(fila, 6)),
                        String.valueOf(tablaFactura.getValueAt(fila, 7))
                    };
            txtNumeroFactura.setText(datosLeidos[0]);
            txtFechaFactura.setText(datosLeidos[1]);
            txtHoraFactura.setText(datosLeidos[2]);
            cbServicio.setSelectedItem(datosLeidos[3]);
            cbNombre.setSelectedItem(datosLeidos[4]);
            txtCantidad.setText(datosLeidos[5]);
            txtPrecio.setText(datosLeidos[6]);
            lblTotal.setText(datosLeidos[7]);
        }
    }//GEN-LAST:event_tablaFacturaMouseClicked

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        int cant = Integer.parseInt(txtCantidad.getText());
        double precio = Double.parseDouble(txtPrecio.getText());
        double total = cant * precio;
        String totalFinal = String.valueOf(total);
        lblTotal.setText(totalFinal);
        guardarArchivo(Integer.parseInt(txtNumeroFactura.getText()), txtFechaFactura.getText(), txtHoraFactura.getText(), cbServicio.getSelectedItem().toString(), cbNombre.getSelectedItem().toString(), Integer.parseInt(txtCantidad.getText()), Double.parseDouble(txtPrecio.getText()), Double.parseDouble(lblTotal.getText()));
        for (int i = 0; i < tablaFactura.getRowCount(); i++) {
            modelFacturas.removeRow(i);
            i = -1;
        }
        llenarTabla();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tablaFactura.getSelectedRow() > -1) {
            int cant = Integer.parseInt(txtCantidad.getText());
            double precio = Double.parseDouble(txtPrecio.getText());
            double total = cant * precio;
            String totalFinal = String.valueOf(total);
            lblTotal.setText(totalFinal);
            actualizarArchivo(Integer.parseInt(txtNumeroFactura.getText()), txtFechaFactura.getText(), txtHoraFactura.getText(), cbServicio.getSelectedItem().toString(), cbNombre.getSelectedItem().toString(), Integer.parseInt(txtCantidad.getText()), Double.parseDouble(txtPrecio.getText()), Double.parseDouble(lblTotal.getText()));
            for (int i = 0; i < tablaFactura.getRowCount(); i++) {
                modelFacturas.removeRow(i);
                i = -1;
            }
            llenarTabla();
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tablaFactura.getModel();
        int fila = tablaFactura.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila de la tabla", null, fila, null);
        } else {
            int resp = JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar la factura?", "¡Eliminar Factura!", JOptionPane.YES_NO_OPTION);
            if (JOptionPane.OK_OPTION == resp) {
                borrarArchivo(Integer.parseInt(txtNumeroFactura.getText()));
                for (int i = 0; i < tablaFactura.getRowCount(); i++) {
                    modelFacturas.removeRow(i);
                    i = -1;
                }
                llenarTabla();
            }
        }

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //SE GUARDA EN EL ARCHIVO CADA VEZ QUE SE VUELVE AL MENÚ PRINCIPAL
        //guardarArchivo();
        this.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void txtHoraFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoraFacturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraFacturaActionPerformed

    private void cbServicioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbServicioItemStateChanged
        // TODO add your handling code here:
        mostrarPrecio();
    }//GEN-LAST:event_cbServicioItemStateChanged

    public void limpiar() {
        txtNumeroFactura.setText("");
        txtFechaFactura.setText("");
        txtHoraFactura.setText("");
        txtCantidad.setText("");
        lblTotal.setText("0.00");
    }

    public void mostrarPrecio() {
        String servicio = String.valueOf(cbServicio.getSelectedItem());
        Double costoServicio = buscar(servicio);
        String costoS = String.valueOf(costoServicio);
        txtPrecio.setText(costoS);
    }

    public void llenarComboBox1() {
        try {
            DataInputStream entrada = new DataInputStream(new FileInputStream(
                    "servicios.dat"));
            try {
                DatosServicios ds = new DatosServicios();
                while (true) {
                    ds.setIdentificacion(entrada.readInt());
                    ds.setCosto(entrada.readDouble());
                    ds.setDescripcion(entrada.readUTF());
                    ds.setDuracion(entrada.readInt());
                    DatosProveedores proveedor = s.obtenerProveedor(entrada.readUTF());
                    ds.setProveedor(proveedor);
                    ds.setEstado(entrada.readByte());
                    cbServicio.addItem(ds.getDescripcion());
                }
            } catch (EOFException eeof) {
                entrada.close();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado!", "Archivo no encontrado",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException eioe) {
            JOptionPane.showMessageDialog(null, "¡Error en el dispositivo de almacenamiento!",
                    "Error en el dispositivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void llenarComboBox2() {
        try {
            DataInputStream entrada = new DataInputStream(new FileInputStream(
                    "clientes.dat"));
            try {
                DatosClientes dc = new DatosClientes();
                while (true) {
                    dc.setIdentificacion(entrada.readInt());
                    dc.setCliente(entrada.readUTF());
                    dc.setCiudad(entrada.readUTF());
                    dc.setDireccion(entrada.readUTF());
                    dc.setTelefono(entrada.readUTF());
                    dc.setCorreoElectronico(entrada.readUTF());
                    dc.setEstado(entrada.readByte());
                    cbNombre.addItem(dc.getCliente());
                }
            } catch (EOFException eeof) {
                entrada.close();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado!", "Archivo no encontrado",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException eioe) {
            JOptionPane.showMessageDialog(null, "¡Error en el dispositivo de almacenamiento!",
                    "Error en el dispositivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    public Double buscar(String descripcion) {
        for (DatosServicios servicio : s.servicios) {
            if (servicio.getDescripcion().equals(descripcion)) {
                return servicio.getCosto();
            }
        }
        return 0.00;
    }

    public void guardarArchivo(int numFactura, String fecha, String hora, String descripcion, String cliente, int cant, double precio, double cantidad) {
        encontrado = 0;
        try {
            Factura f = new Factura();
            f.setNumeroFactura(numFactura);
            f.setFecha(fecha);
            f.setHora(hora);
            f.setDescipcionServicios(descripcion);
            f.setCliente(cliente);
            f.setCantidad(cant);
            f.setPrecio(precio);
            f.setTotal(cantidad);
            encontrado = buscar(f.getNumeroFactura(), encontrado);
            if (encontrado == 0) {
                DataOutputStream salida = new DataOutputStream(new FileOutputStream("facturas.dat", true));
                salida.writeInt(f.getNumeroFactura());
                salida.writeUTF(f.getFecha());
                salida.writeUTF(f.getHora());
                salida.writeUTF(f.getDescipcionServicios());
                salida.writeUTF(f.getCliente());
                salida.writeInt(f.getCantidad());
                salida.writeDouble(f.getPrecio());
                salida.writeDouble(f.getTotal());
                JOptionPane.showMessageDialog(null, "¡Datos agregados correctamente!",
                        "Datos Agregados", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
                salida.close();
            } else {
                JOptionPane.showMessageDialog(null, "¡Ya existe un registro con ese usuario!",
                        "Datos Existentes", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex01) {
            JOptionPane.showMessageDialog(null, "¡Ocurrió un error al guardar!",
                    "Error al guardar", JOptionPane.ERROR_MESSAGE);
        }
    }

    public int buscar(int numF, int encontrado) {
        try {
            DataInputStream entrada = new DataInputStream(new FileInputStream("facturas.dat"));
            try {
                Factura f = new Factura();
                while ((true) && (encontrado == 0)) {
                    f.setNumeroFactura(entrada.readInt());
                    f.setFecha(entrada.readUTF());
                    f.setHora(entrada.readUTF());
                    f.setDescipcionServicios(entrada.readUTF());
                    f.setCliente(entrada.readUTF());
                    f.setCantidad(entrada.readInt());
                    f.setPrecio(entrada.readDouble());
                    f.setTotal(entrada.readDouble());
                    if (f.getNumeroFactura() == numF) {
                        encontrado = 1;
                    }
                }
            } catch (EOFException eeof) {
                entrada.close();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado!", "Archivo no encontrado",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException eioe) {
            JOptionPane.showMessageDialog(null, "¡Error en el dispositivo de almacenamiento!",
                    "Error en el dispositivo", JOptionPane.ERROR_MESSAGE);
        }
        return encontrado;
    }

    public void actualizarArchivo(int numFactura, String fecha, String hora, String descripcion, String cliente, int cant, double precio, double total) {
        try {
            Factura f = new Factura();
            DataInputStream entrada = new DataInputStream(new FileInputStream("facturas.dat"));
            DataOutputStream salida = new DataOutputStream(new FileOutputStream(
                    "temporalFacturas.dat"));
            try {
                while (true) {
                    f.setNumeroFactura(entrada.readInt());
                    f.setFecha(entrada.readUTF());
                    f.setHora(entrada.readUTF());
                    f.setDescipcionServicios(entrada.readUTF());
                    f.setCliente(entrada.readUTF());
                    f.setCantidad(entrada.readInt());
                    f.setPrecio(entrada.readDouble());
                    f.setTotal(entrada.readDouble());
                    if (f.getNumeroFactura() == numFactura) {
                        f.setNumeroFactura(numFactura);
                        f.setFecha(fecha);
                        f.setHora(hora);
                        f.setDescipcionServicios(descripcion);
                        f.setCliente(cliente);
                        f.setCantidad(cant);
                        f.setPrecio(precio);
                        f.setTotal(total);
                    }
                    salida.writeInt(f.getNumeroFactura());
                    salida.writeUTF(f.getFecha());
                    salida.writeUTF(f.getHora());
                    salida.writeUTF(f.getDescipcionServicios());
                    salida.writeUTF(f.getCliente());
                    salida.writeInt(f.getCantidad());
                    salida.writeDouble(f.getPrecio());
                    salida.writeDouble(f.getTotal());
                }
            } catch (EOFException eofe) {
                entrada.close();
                salida.close();
                mover();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado, revise!",
                    "Archivo no encontrado", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "¡Error desconocido, revise!",
                    "Error desconocido", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void mover() {
        try {
            Factura f = new Factura();
            DataInputStream entrada = new DataInputStream(new FileInputStream(
                    "temporalFacturas.dat"));
            DataOutputStream salida = new DataOutputStream(new FileOutputStream(
                    "facturas.dat"));
            try {
                while (true) {
                    f.setNumeroFactura(entrada.readInt());
                    f.setFecha(entrada.readUTF());
                    f.setHora(entrada.readUTF());
                    f.setDescipcionServicios(entrada.readUTF());
                    f.setCliente(entrada.readUTF());
                    f.setCantidad(entrada.readInt());
                    f.setPrecio(entrada.readDouble());
                    f.setTotal(entrada.readDouble());
                    salida.writeInt(f.getNumeroFactura());
                    salida.writeUTF(f.getFecha());
                    salida.writeUTF(f.getHora());
                    salida.writeUTF(f.getDescipcionServicios());
                    salida.writeUTF(f.getCliente());
                    salida.writeInt(f.getCantidad());
                    salida.writeDouble(f.getPrecio());
                    salida.writeDouble(f.getTotal());
                }
            } catch (EOFException eofe) {
                entrada.close();
                salida.close();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado, revise!",
                    "Archivo no encontrado", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "¡Error desconocido, revise!",
                    "Error desconocido", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void borrarArchivo(int buscar) {
        try {
            Factura f = new Factura();
            DataInputStream entrada = new DataInputStream(new FileInputStream("facturas.dat"));
            DataOutputStream salida = new DataOutputStream(new FileOutputStream(
                    "temporalFacturas.dat"));
            try {
                while (true) {
                    f.setNumeroFactura(entrada.readInt());
                    f.setFecha(entrada.readUTF());
                    f.setHora(entrada.readUTF());
                    f.setDescipcionServicios(entrada.readUTF());
                    f.setCliente(entrada.readUTF());
                    f.setCantidad(entrada.readInt());
                    f.setPrecio(entrada.readDouble());
                    f.setTotal(entrada.readDouble());
                    if (f.getNumeroFactura() != buscar) {
                        salida.writeInt(f.getNumeroFactura());
                        salida.writeUTF(f.getFecha());
                        salida.writeUTF(f.getHora());
                        salida.writeUTF(f.getDescipcionServicios());
                        salida.writeUTF(f.getCliente());
                        salida.writeInt(f.getCantidad());
                        salida.writeDouble(f.getPrecio());
                        salida.writeDouble(f.getTotal());
                    }
                }
            } catch (EOFException eofe) {
                entrada.close();
                salida.close();
                JOptionPane.showMessageDialog(null, "¡Datos fueron eliminados correctamente!",
                        "Datos eliminados", JOptionPane.INFORMATION_MESSAGE);
                limpiar();
                mover();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado, revise!",
                    "Archivo no encontrado", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "¡Error desconocido, revise!",
                    "Error desconocido", JOptionPane.ERROR_MESSAGE);
        }
    }


    public void llenarTabla() {
        try {
            DataInputStream entrada = new DataInputStream(new FileInputStream("facturas.dat"));
            try {
                Factura f = new Factura();
                while (true) {
                    f.setNumeroFactura(entrada.readInt());
                    f.setFecha(entrada.readUTF());
                    f.setHora(entrada.readUTF());
                    f.setDescipcionServicios(entrada.readUTF());
                    f.setCliente(entrada.readUTF());
                    f.setCantidad(entrada.readInt());
                    f.setPrecio(entrada.readDouble());
                    f.setTotal(entrada.readDouble());
                    modelFacturas.addRow(new Object[]{f.getNumeroFactura(), f.getFecha(), f.getHora(), f.getDescipcionServicios(), f.getCliente(), f.getCantidad(), f.getPrecio(), f.getTotal()});
                    tablaFactura.setModel(modelFacturas);
                }
            } catch (EOFException eeof) {
                entrada.close();
            }
        } catch (FileNotFoundException fnfe) {
            JOptionPane.showMessageDialog(null, "¡Archivo no encontrado!", "Archivo no encontrado",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException eioe) {
            JOptionPane.showMessageDialog(null, "¡Error en el dispositivo de almacenamiento!",
                    "Error en el dispositivo", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Facturacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cbNombre;
    private javax.swing.JComboBox<String> cbServicio;
    private javax.swing.JButton jButton11;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tablaFactura;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtFechaFactura;
    private javax.swing.JTextField txtHoraFactura;
    private javax.swing.JTextField txtNumeroFactura;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
